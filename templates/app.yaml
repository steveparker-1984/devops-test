AWSTemplateFormatVersion: "2010-09-09"
Description: Test app
Parameters:

  Branch:
    Description: The deployed branch
    Type: String

  PublicSubnet1:
    Type: String

  PublicSubnet2:
    Type: String

  PublicSubnet3:
    Type: String

  PrivateSubnet1:
    Type: String

  PrivateSubnet2:
    Type: String

  PrivateSubnet3:
    Type: String

  MinCapacity:
    Type: String

  MaxCapacity:
    Type: String

  DesiredCapacity:
    Type: String

  AMI:
    Type: String

  AssetsBucket:
    Type: String

  Asset:
    Type: String

  VpcId:
    Type: String

Resources:

  # Jenkins master role
  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: '/'
      RoleName: !Sub App-Role-${Branch}
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  InstancePolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref InstanceRole
      PolicyName: !Sub App-Role-${Branch}
      PolicyDocument:
        Statement:
          - Action:
              - s3:Get*
              - s3:List*
            Effect: Allow
            Resource: "*"

  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - !Ref InstanceRole

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: App instance security group
      VpcId: !Ref VpcId
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          Description: Web access
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: App instance security group
      VpcId: !Ref VpcId
      SecurityGroupIngress: 
        - SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
          Description: Load balancer ingress
          FromPort: 3000
          IpProtocol: tcp
          ToPort: 3000

  LaunchConfig: 
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      ImageId: !Ref AMI
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          curl -sL https://deb.nodesource.com/setup_12.x | bash -
          apt-get update && apt-get install -y python python-pip python3 python3-pip nodejs unzip

          pip3 install awscli==1.18.39
          npm install pm2 -g

          aws s3 cp s3://${AssetsBucket}/${Asset} .
          unzip ${Asset} -d .

          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
          
          pm2 start index.js
          pm2 startup
          pm2 save
      SecurityGroups: 
        - !Ref InstanceSecurityGroup
      InstanceType: t2.small

  AutoScalingGroup:
    CreationPolicy:
      ResourceSignal:
        Count: !Ref DesiredCapacity
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 1
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: !Ref MinCapacity
      MaxSize: !Ref MaxCapacity
      DesiredCapacity: !Ref DesiredCapacity
      TargetGroupARNs:
        - !Ref TargetGroup
      Tags:
        - Key: Name
          Value: !Sub Test-App-${Branch}
          PropagateAtLaunch: "true"

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: !Sub Test-App-LB-${Branch}
      SecurityGroups: 
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      Tags: 
        - Key: Name
          Value: !Sub Test-App-${Branch}
      Type: application

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VpcId

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: '80'
      Protocol: HTTP